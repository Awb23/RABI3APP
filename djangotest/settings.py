"""
Django settings for djangotest project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path 
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os

SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-REPLACE_THIS_WITH_A_SECURE_KEY')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
CSRF_TRUSTED_ORIGINS = [
    "https://web-production-68cd.up.railway.app",
]

ALLOWED_HOSTS = [
    'web-production-68cd.up.railway.app',
    'localhost',
    '127.0.0.1',
]


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True



# Application definition

INSTALLED_APPS = [
    "custm.apps.CustmConfig",
    "product.apps.ProductConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "paypal.standard.ipn",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",  
    "django.contrib.staticfiles",
     'allauth',
     'cloudinary',
    'cloudinary_storage',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.facebook',
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', 
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
      "allauth.account.middleware.AccountMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
      'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "djangotest.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "djangotest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

import dj_database_url
import os

DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', 'postgresql://postgres:PptwClqtGolfCxhUUCwAhQYYjefcGJXi@shuttle.proxy.rlwy.net:23206/railway'),
        conn_max_age=600,
        ssl_require=True
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [

    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True





STATIC_URL = "static/"
STATIC_ROOT= os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    BASE_DIR / "djangotest/static",
    
]
LOGIN_REDIRECT_URL="profile"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
import dj_database_url

AUTH_USER_MODEL="custm.users"
EMAIL_BACKEND="django.core.mail.backends.console.EmailBackend"
PAYPAL_RECEIVER_EMAIL="awti6565@gmail.com"
PAYPAL_TEST=True
# settings.py
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True  # Use TLS instead of SSL for Gmail
EMAIL_HOST_USER = 'itsazizbob@gmail.com'
EMAIL_HOST_PASSWORD = 'odoa belq ajyq vdjh'  # Make sure to use an app-specific password if 2FA is enabled



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
           'client_id': '130377574223-tmekbiae9n6tesq0a1lejmf75fnhp7vt.apps.googleusercontent.com',
             'secret': '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o',
          
        },
        'SCOPE': ['profile','email',],
         'AUTH_PARAMS': {'access_type': 'online'},
        'METHOD': 'oauth2',
        'VERIFIED_EMAIL': True,
    },
    'github': {
        'APP': {
           'client_id': '130377574223-tmekbiae9n6tesq0a1lejmf75fnhp7vt.apps.googleusercontent.com',
             'secret': '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o',
           
        }
    }
   
}

SOCIALACCOUNT_LOGIN_ON_GET=True
LOGIN_REDIRECT_URL = 'profile'
LOGIN_URL = 'login'
SOCIALACCOUNT_AUTO_SIGNUP = True
WSGI_APPLICATION = "djangotest.wsgi.application"


from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',  # 'danger' corresponds to Bootstrap's alert-danger
}

# settings.py


STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
import os
from dotenv import load_dotenv
load_dotenv()



DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
import os

MEDIA_URL = '/media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


import cloudinary

cloudinary.config(
    cloud_name='dwswcrceq',
    api_key='499739717719592',
    api_secret='fbMSSDn3dy9elp-d6qraAuDnkXA',
    secure=True
)
